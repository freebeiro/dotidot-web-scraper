# frozen_string_literal: true

require "rails_helper"

RSpec.describe UrlValidatorService do
  describe ".call" do
    context "with valid URLs" do
      it "validates standard HTTP URL" do
        result = described_class.call("http://example.com")
        expect(result[:valid]).to be true
        expect(result[:url]).to eq("http://example.com")
      end

      it "validates HTTPS URL" do
        result = described_class.call("https://example.com")
        expect(result[:valid]).to be true
        expect(result[:url]).to eq("https://example.com")
      end

      it "validates URL with path" do
        result = described_class.call("https://example.com/path/to/resource")
        expect(result[:valid]).to be true
      end

      it "validates URL with query parameters" do
        result = described_class.call("https://example.com?param=value&other=123")
        expect(result[:valid]).to be true
      end

      it "validates URL with fragment" do
        result = described_class.call("https://example.com#section")
        expect(result[:valid]).to be true
      end

      it "validates URL with port" do
        result = described_class.call("https://example.com:8080")
        expect(result[:valid]).to be true
      end

      it "rejects URLs without scheme" do
        result = described_class.call("example.com")
        expect(result[:valid]).to be false
        expect(result[:error]).to include("Invalid URL format")
      end

      it "handles URLs with authentication" do
        result = described_class.call("https://user:pass@example.com")
        expect(result[:valid]).to be true
      end

      it "validates international domain names" do
        result = described_class.call("https://例え.jp")
        expect(result[:valid]).to be true
      end
    end

    context "with invalid URLs" do
      it "rejects empty string" do
        result = described_class.call("")
        expect(result[:valid]).to be false
        expect(result[:error]).to include("URL cannot be blank")
      end

      it "rejects nil" do
        result = described_class.call(nil)
        expect(result[:valid]).to be false
        expect(result[:error]).to include("URL cannot be blank")
      end

      it "rejects malformed URLs" do
        result = described_class.call("not a url at all")
        expect(result[:valid]).to be false
        expect(result[:error]).to include("Invalid URL format")
      end

      it "rejects URLs with invalid schemes" do
        result = described_class.call("ftp://example.com")
        expect(result[:valid]).to be false
        expect(result[:error]).to include("not allowed. Must be HTTP or HTTPS")
      end

      it "rejects javascript URLs" do
        result = described_class.call("javascript:alert(1)")
        expect(result[:valid]).to be false
        expect(result[:error]).to include("not allowed. Must be HTTP or HTTPS")
      end

      it "rejects data URLs" do
        result = described_class.call("data:text/html,<script>alert(1)</script>")
        expect(result[:valid]).to be false
        expect(result[:error]).to include("not allowed. Must be HTTP or HTTPS")
      end

      it "rejects file URLs" do
        result = described_class.call("file:///etc/passwd")
        expect(result[:valid]).to be false
        expect(result[:error]).to include("not allowed. Must be HTTP or HTTPS")
      end
    end

    context "SSRF protection" do
      context "private IP addresses" do
        it "blocks localhost" do
          result = described_class.call("http://localhost")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end

        it "blocks 127.0.0.1" do
          result = described_class.call("http://127.0.0.1")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end

        it "blocks ::1 (IPv6 localhost)" do
          result = described_class.call("http://[::1]")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end

        it "blocks 10.x.x.x range" do
          result = described_class.call("http://10.0.0.1")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end

        it "blocks 172.16-31.x.x range" do
          result = described_class.call("http://172.16.0.1")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end

        it "blocks 192.168.x.x range" do
          result = described_class.call("http://192.168.1.1")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end

        it "blocks 169.254.x.x link-local" do
          result = described_class.call("http://169.254.1.1")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end

        it "blocks 0.0.0.0" do
          result = described_class.call("http://0.0.0.0")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end

        it "blocks private IPv6 ranges" do
          result = described_class.call("http://[fc00::1]")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end
      end

      context "DNS rebinding protection" do
        it "blocks domains that resolve to private IPs" do
          allow(Resolv).to receive(:getaddress).with("evil.com").and_return("192.168.1.1")

          result = described_class.call("http://evil.com")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end

        it "allows domains that resolve to public IPs" do
          allow(Resolv).to receive(:getaddress).with("example.com").and_return("93.184.216.34")

          result = described_class.call("http://example.com")
          expect(result[:valid]).to be true
        end

        it "handles DNS resolution errors gracefully" do
          allow(Resolv).to receive(:getaddress).and_raise(Resolv::ResolvError)

          result = described_class.call("http://nonexistent.domain")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("Failed to resolve domain")
        end
      end

      context "special cases" do
        it "blocks metadata service endpoints" do
          result = described_class.call("http://169.254.169.254/latest/meta-data/")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end

        it "blocks decimal IP notation" do
          # 192.168.1.1 = 3232235777 in decimal
          result = described_class.call("http://3232235777")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end

        it "blocks octal IP notation" do
          # 127.0.0.1 in octal
          result = described_class.call("http://0177.0.0.1")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end

        it "blocks hex IP notation" do
          # 127.0.0.1 in hex
          result = described_class.call("http://0x7f.0x0.0x0.0x1")
          expect(result[:valid]).to be false
          expect(result[:error]).to include("blocked for security reasons")
        end
      end
    end

    context "URL normalization" do
      it "adds missing scheme" do
        result = described_class.call("example.com")
        expect(result[:url]).to eq("http://example.com")
      end

      it "preserves existing scheme" do
        result = described_class.call("https://example.com")
        expect(result[:url]).to eq("https://example.com")
      end

      it "handles trailing slashes" do
        result = described_class.call("http://example.com/")
        expect(result[:url]).to eq("http://example.com/")
      end

      it "preserves query parameters" do
        result = described_class.call("example.com?foo=bar")
        expect(result[:url]).to eq("http://example.com?foo=bar")
      end

      it "handles encoded characters" do
        result = described_class.call("http://example.com/path%20with%20spaces")
        expect(result[:valid]).to be true
        expect(result[:url]).to include("path%20with%20spaces")
      end

      it "rejects URLs that are too long" do
        long_url = "http://example.com/#{'a' * 10_000}"
        result = described_class.call(long_url)
        expect(result[:valid]).to be false
        expect(result[:error]).to include("URL too long")
      end
    end

    context "edge cases" do
      it "handles URLs with multiple consecutive slashes" do
        result = described_class.call("http://example.com//path///to////resource")
        expect(result[:valid]).to be true
      end

      it "handles URLs with special characters" do
        result = described_class.call("http://example.com/path?q=test&foo=bar#section")
        expect(result[:valid]).to be true
      end

      it "rejects URLs with control characters" do
        result = described_class.call("http://example.com/path\x00")
        expect(result[:valid]).to be false
      end

      it "handles internationalized URLs" do
        result = described_class.call("http://例え.jp/パス")
        expect(result[:valid]).to be true
      end

      it "validates URLs with subdomains" do
        result = described_class.call("http://sub.domain.example.com")
        expect(result[:valid]).to be true
      end

      it "handles URLs with authentication credentials" do
        result = described_class.call("http://user:pass@example.com")
        expect(result[:valid]).to be true
      end
    end

    context "performance" do
      it "validates URLs quickly" do
        start_time = Time.current
        100.times { described_class.call("http://example.com") }
        elapsed = Time.current - start_time

        expect(elapsed).to be < 1.0 # Should process 100 URLs in under 1 second
      end

      it "caches DNS lookups" do
        expect(Resolv).to receive(:getaddress).with("example.com").once.and_return("93.184.216.34")

        5.times { described_class.call("http://example.com") }
      end
    end
  end
end
